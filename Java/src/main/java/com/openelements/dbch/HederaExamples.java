package com.openelements.dbch;

import com.hedera.hashgraph.sdk.*;
import io.github.cdimascio.dotenv.Dotenv;

import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeoutException;

public class HederaExamples {
    private static Client client;
    private static FileId bytecodeFileId;
    private static ContractId newContractId;

    public static void main(String[] args) throws PrecheckStatusException, TimeoutException, ReceiptStatusException {

        //Grab your Hedera Testnet account ID and private key
        AccountId myAccountId = AccountId.fromString(Dotenv.load().get("MY_ACCOUNT_ID"));
        PrivateKey myPrivateKey = PrivateKey.fromString(Dotenv.load().get("MY_PRIVATE_KEY"));

        //Create your Hedera Testnet client
        client = Client.forTestnet();

        //Set your account as the client's operator
        client.setOperator(myAccountId, myPrivateKey);

        //Set the default maximum transaction fee (in Hbar)
        client.setDefaultMaxTransactionFee(new Hbar(100));

        //Set the maximum payment for queries (in Hbar)
        client.setMaxQueryPayment(new Hbar(50));

        AccountInfoQuery query = new AccountInfoQuery().setAccountId(myAccountId);
        AccountInfo accountInfo = query.execute(client);
        System.out.println(accountInfo);

        System.out.println("Current account balance: "+ accountInfo.balance);

        storeSmartContractByteCode();

        deploySmartContract();

        System.out.println("Current account balance: "+ accountInfo.balance);

    }

    private static void storeSmartContractByteCode() throws PrecheckStatusException, TimeoutException, ReceiptStatusException {
        //String contractByteCodeFromRemix = "60806040526040518060400160405280601381526020017f48656c6c6f2073616774206469652057656c7400000000000000000000000000815250600190816200004a919062000305565b505f6002553480156200005b575f80fd5b50335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620003e9565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200011d57607f821691505b602082108103620001335762000132620000d8565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302620001977fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200015a565b620001a386836200015a565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f620001ed620001e7620001e184620001bb565b620001c4565b620001bb565b9050919050565b5f819050919050565b6200020883620001cd565b620002206200021782620001f4565b84845462000166565b825550505050565b5f90565b6200023662000228565b62000243818484620001fd565b505050565b5b818110156200026a576200025e5f826200022c565b60018101905062000249565b5050565b601f821115620002b957620002838162000139565b6200028e846200014b565b810160208510156200029e578190505b620002b6620002ad856200014b565b83018262000248565b50505b505050565b5f82821c905092915050565b5f620002db5f1984600802620002be565b1980831691505092915050565b5f620002f58383620002ca565b9150826002028217905092915050565b6200031082620000a1565b67ffffffffffffffff8111156200032c576200032b620000ab565b5b62000338825462000105565b620003458282856200026e565b5f60209050601f8311600181146200037b575f841562000366578287015190505b620003728582620002e8565b865550620003e1565b601f1984166200038b8662000139565b5f5b82811015620003b4578489015182556001820191506020850194506020810190506200038d565b86831015620003d45784890151620003d0601f891682620002ca565b8355505b6001600288020188555050505b505050505050565b6105cf80620003f75f395ff3fe608060405234801561000f575f80fd5b506004361061004a575f3560e01c806313bdfacd1461004e5780636781df671461006c5780638e69c26c1461008a578063a6f9dae1146100a8575b5f80fd5b6100566100c4565b6040516100639190610341565b60405180910390f35b610074610148565b6040516100819190610379565b60405180910390f35b610092610151565b60405161009f91906103d1565b60405180910390f35b6100c260048036038101906100bd9190610418565b610178565b005b60605f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461011c575f80fd5b610124610210565b60405160200161013491906104a3565b604051602081830303815290604052905090565b5f600254905090565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101ce575f80fd5b805f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606060025f815480929190610224906104f5565b91905055506001805461023690610569565b80601f016020809104026020016040519081016040528092919081815260200182805461026290610569565b80156102ad5780601f10610284576101008083540402835291602001916102ad565b820191905f5260205f20905b81548152906001019060200180831161029057829003601f168201915b5050505050905090565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156102ee5780820151818401526020810190506102d3565b5f8484015250505050565b5f601f19601f8301169050919050565b5f610313826102b7565b61031d81856102c1565b935061032d8185602086016102d1565b610336816102f9565b840191505092915050565b5f6020820190508181035f8301526103598184610309565b905092915050565b5f819050919050565b61037381610361565b82525050565b5f60208201905061038c5f83018461036a565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6103bb82610392565b9050919050565b6103cb816103b1565b82525050565b5f6020820190506103e45f8301846103c2565b92915050565b5f80fd5b6103f7816103b1565b8114610401575f80fd5b50565b5f81359050610412816103ee565b92915050565b5f6020828403121561042d5761042c6103ea565b5b5f61043a84828501610404565b91505092915050565b7f48656c6c6f20576f726c64210000000000000000000000000000000000000000815250565b5f81905092915050565b5f61047d826102b7565b6104878185610469565b93506104978185602086016102d1565b80840191505092915050565b5f6104ad82610443565b600c820191506104bd8284610473565b915081905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6104ff82610361565b91507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610531576105306104c8565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061058057607f821691505b6020821081036105935761059261053c565b5b5091905056fea2646970667358221220344270547e24863adefa8c1baef3730bd0c4e520c800d44fd107d55bb18f407d64736f6c63430008160033";
        // String contractByteCodeFromRemix = "608060405234801561000f575f80fd5b50335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001805f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055506117c5806100d05f395ff3fe608060405234801561000f575f80fd5b5060043610610086575f3560e01c8063ae8c4f5311610059578063ae8c4f5314610112578063beb691d414610130578063cc0fb2c31461014c578063da04bf011461016857610086565b806327eb55761461008a57806345cd4759146100a8578063614f3180146100c6578063704b6c02146100f6575b5f80fd5b610092610184565b60405161009f9190611176565b60405180910390f35b6100b06104ce565b6040516100bd9190611176565b60405180910390f35b6100e060048036038101906100db9190611201565b61060e565b6040516100ed9190611176565b60405180910390f35b610110600480360381019061010b9190611201565b6107a7565b005b61011a610855565b6040516101279190611176565b60405180910390f35b61014a60048036038101906101459190611201565b610ba1565b005b61016660048036038101906101619190611358565b610c43565b005b610182600480360381019061017d9190611358565b610cf5565b005b6060805f805b60025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2080549050811015610263575f151560025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2082815481106102245761022361139f565b5b905f5260205f2090600202016001015f9054906101000a900460ff1615150361025657818061025290611402565b9250505b808060010191505061018a565b508067ffffffffffffffff81111561027e5761027d611234565b5b6040519080825280602002602001820160405280156102b757816020015b6102a4610f11565b81526020019060019003908161029c5790505b5091505f90505f5b60025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20805490508110156104c5575f151560025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2082815481106103595761035861139f565b5b905f5260205f2090600202016001015f9054906101000a900460ff161515036104b85760025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081815481106103cb576103ca61139f565b5b905f5260205f2090600202016040518060400160405290815f820180546103f190611476565b80601f016020809104026020016040519081016040528092919081815260200182805461041d90611476565b80156104685780601f1061043f57610100808354040283529160200191610468565b820191905f5260205f20905b81548152906001019060200180831161044b57829003601f168201915b50505050508152602001600182015f9054906101000a900460ff16151515158152505083838151811061049e5761049d61139f565b5b602002602001018190525081806104b490611402565b9250505b80806001019150506102bf565b50819250505090565b606060025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20805480602002602001604051908101604052809291908181526020015f905b82821015610605578382905f5260205f2090600202016040518060400160405290815f8201805461055c90611476565b80601f016020809104026020016040519081016040528092919081815260200182805461058890611476565b80156105d35780601f106105aa576101008083540402835291602001916105d3565b820191905f5260205f20905b8154815290600101906020018083116105b657829003601f168201915b50505050508152602001600182015f9054906101000a900460ff1615151515815250508152602001906001019061052c565b50505050905090565b606060015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16610667576106666114a6565b5b60025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20805480602002602001604051908101604052809291908181526020015f905b8282101561079c578382905f5260205f2090600202016040518060400160405290815f820180546106f390611476565b80601f016020809104026020016040519081016040528092919081815260200182805461071f90611476565b801561076a5780601f106107415761010080835404028352916020019161076a565b820191905f5260205f20905b81548152906001019060200180831161074d57829003601f168201915b50505050508152602001600182015f9054906101000a900460ff161515151581525050815260200190600101906106c3565b505050509050919050565b60015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff166107fe576107fd6114a6565b5b6001805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555050565b6060805f805b60025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2080549050811015610935576001151560025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2082815481106108f6576108f561139f565b5b905f5260205f2090600202016001015f9054906101000a900460ff1615150361092857818061092490611402565b9250505b808060010191505061085b565b508067ffffffffffffffff8111156109505761094f611234565b5b60405190808252806020026020018201604052801561098957816020015b610976610f11565b81526020019060019003908161096e5790505b5091505f90505f5b60025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2080549050811015610b98576001151560025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208281548110610a2c57610a2b61139f565b5b905f5260205f2090600202016001015f9054906101000a900460ff16151503610b8b5760025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208181548110610a9e57610a9d61139f565b5b905f5260205f2090600202016040518060400160405290815f82018054610ac490611476565b80601f0160208091040260200160405190810160405280929190818152602001828054610af090611476565b8015610b3b5780601f10610b1257610100808354040283529160200191610b3b565b820191905f5260205f20905b815481529060010190602001808311610b1e57829003601f168201915b50505050508152602001600182015f9054906101000a900460ff161515151581525050838381518110610b7157610b7061139f565b5b60200260200101819052508180610b8790611402565b9250505b8080600101915050610991565b50819250505090565b60015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16610bf857610bf76114a6565b5b60025f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f610c409190610f2c565b50565b60025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060405180604001604052808381526020015f1515815250908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f019081610cd09190611670565b506020820151816001015f6101000a81548160ff021916908315150217905550505050565b5f5b60025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2080549050811015610eb557610e2c60025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208281548110610d9157610d9061139f565b5b905f5260205f2090600202015f018054610daa90611476565b80601f0160208091040260200160405190810160405280929190818152602001828054610dd690611476565b8015610e215780601f10610df857610100808354040283529160200191610e21565b820191905f5260205f20905b815481529060010190602001808311610e0457829003601f168201915b505050505083610eb9565b15610ea857600160025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208281548110610e8257610e8161139f565b5b905f5260205f2090600202016001015f6101000a81548160ff0219169083151502179055505b8080600101915050610cf7565b5050565b5f81604051602001610ecb9190611779565b6040516020818303038152906040528051906020012083604051602001610ef29190611779565b6040516020818303038152906040528051906020012014905092915050565b6040518060400160405280606081526020015f151581525090565b5080545f8255600202905f5260205f2090810190610f4a9190610f4d565b50565b5b80821115610f81575f8082015f610f659190610f85565b600182015f6101000a81549060ff021916905550600201610f4e565b5090565b508054610f9190611476565b5f825580601f10610fa25750610fbf565b601f0160209004905f5260205f2090810190610fbe9190610fc2565b5b50565b5b80821115610fd9575f815f905550600101610fc3565b5090565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561103d578082015181840152602081019050611022565b5f8484015250505050565b5f601f19601f8301169050919050565b5f61106282611006565b61106c8185611010565b935061107c818560208601611020565b61108581611048565b840191505092915050565b5f8115159050919050565b6110a481611090565b82525050565b5f604083015f8301518482035f8601526110c48282611058565b91505060208301516110d9602086018261109b565b508091505092915050565b5f6110ef83836110aa565b905092915050565b5f602082019050919050565b5f61110d82610fdd565b6111178185610fe7565b93508360208202850161112985610ff7565b805f5b85811015611164578484038952815161114585826110e4565b9450611150836110f7565b925060208a0199505060018101905061112c565b50829750879550505050505092915050565b5f6020820190508181035f83015261118e8184611103565b905092915050565b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6111d0826111a7565b9050919050565b6111e0816111c6565b81146111ea575f80fd5b50565b5f813590506111fb816111d7565b92915050565b5f602082840312156112165761121561119f565b5b5f611223848285016111ed565b91505092915050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61126a82611048565b810181811067ffffffffffffffff8211171561128957611288611234565b5b80604052505050565b5f61129b611196565b90506112a78282611261565b919050565b5f67ffffffffffffffff8211156112c6576112c5611234565b5b6112cf82611048565b9050602081019050919050565b828183375f83830152505050565b5f6112fc6112f7846112ac565b611292565b90508281526020810184848401111561131857611317611230565b5b6113238482856112dc565b509392505050565b5f82601f83011261133f5761133e61122c565b5b813561134f8482602086016112ea565b91505092915050565b5f6020828403121561136d5761136c61119f565b5b5f82013567ffffffffffffffff81111561138a576113896111a3565b5b6113968482850161132b565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f819050919050565b5f61140c826113f9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361143e5761143d6113cc565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061148d57607f821691505b6020821081036114a05761149f611449565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52600160045260245ffd5b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261152f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826114f4565b61153986836114f4565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61157461156f61156a846113f9565b611551565b6113f9565b9050919050565b5f819050919050565b61158d8361155a565b6115a16115998261157b565b848454611500565b825550505050565b5f90565b6115b56115a9565b6115c0818484611584565b505050565b5b818110156115e3576115d85f826115ad565b6001810190506115c6565b5050565b601f821115611628576115f9816114d3565b611602846114e5565b81016020851015611611578190505b61162561161d856114e5565b8301826115c5565b50505b505050565b5f82821c905092915050565b5f6116485f198460080261162d565b1980831691505092915050565b5f6116608383611639565b9150826002028217905092915050565b61167982611006565b67ffffffffffffffff81111561169257611691611234565b5b61169c8254611476565b6116a78282856115e7565b5f60209050601f8311600181146116d8575f84156116c6578287015190505b6116d08582611655565b865550611737565b601f1984166116e6866114d3565b5f5b8281101561170d578489015182556001820191506020850194506020810190506116e8565b8683101561172a5784890151611726601f891682611639565b8355505b6001600288020188555050505b505050505050565b5f81905092915050565b5f61175382611006565b61175d818561173f565b935061176d818560208601611020565b80840191505092915050565b5f6117848284611749565b91508190509291505056fea2646970667358221220a1a2399fe866d56661ca9ecb5b57a266203d838f427570427604328cd86e976c64736f6c63430008160033";
        String contractByteCodeFromRemix = "608060405234801561000f575f80fd5b506101688061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c806313bdfacd1461002d575b5f80fd5b61003561004b565b6040516100429190610112565b60405180910390f35b60606040518060400160405280600c81526020017f48656c6c6f20576f726c64210000000000000000000000000000000000000000815250905090565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156100bf5780820151818401526020810190506100a4565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6100e482610088565b6100ee8185610092565b93506100fe8185602086016100a2565b610107816100ca565b840191505092915050565b5f6020820190508181035f83015261012a81846100da565b90509291505056fea2646970667358221220597224cef6d151fe6477f4ca28613d00b5e23d607cba997199f6860f06b1b6ce64736f6c63430008160033";
        byte[] bytecode = contractByteCodeFromRemix.getBytes(StandardCharsets.UTF_8);

        //Create a file on Hedera and store the hex-encoded bytecode
        FileCreateTransaction fileCreateTx = new FileCreateTransaction()
                //Set the bytecode of the contract
                .setContents(bytecode);

        //Submit the file to the Hedera test network signing with the transaction fee payer key specified with the client
        TransactionResponse submitTx = fileCreateTx.execute(client);

        //Get the receipt of the file create transaction
        TransactionReceipt fileReceipt = submitTx.getReceipt(client);

        //Get the file ID from the receipt
        bytecodeFileId = fileReceipt.fileId;

        //Log the file ID
        System.out.println("The smart contract bytecode file ID is " +bytecodeFileId);
    }

    private static void deploySmartContract() throws PrecheckStatusException, TimeoutException, ReceiptStatusException {
        // Instantiate the contract instance
        ContractCreateTransaction contractTx = new ContractCreateTransaction()
                //Set the file ID of the Hedera file storing the bytecode
                .setBytecodeFileId(bytecodeFileId)
                //Set the gas to instantiate the contract
                .setGas(100_000);
                //Provide the constructor parameters for the contract
                // for this contract, the constructor takes no parameters

        //Submit the transaction to the Hedera test network
        TransactionResponse contractResponse = contractTx.execute(client);

        //Get the receipt of the file create transaction
        TransactionReceipt contractReceipt = contractResponse.getReceipt(client);

        //Get the smart contract ID
        newContractId = contractReceipt.contractId;

        //Log the smart contract ID
        System.out.println("The smart contract ID is " + newContractId);
    }

    public static void callPrint() throws PrecheckStatusException, TimeoutException {
        // Calls a function of the smart contract
        ContractCallQuery contractQuery = new ContractCallQuery()
                //Set the gas for the query
                .setGas(100000)
                //Set the contract ID to return the request for
                .setContractId(newContractId)
                //Set the function of the contract to call
                .setFunction("print" )
                //Set the query payment for the node returning the request
                //This value must cover the cost of the request otherwise will fail
                .setQueryPayment(new Hbar(2));

        //Submit to a Hedera network
        ContractFunctionResult getMessage = contractQuery.execute(client);
        //Get the message
        String message = getMessage.getString(0);

        //Log the message
        System.out.println("The contract message: " + message);
    }
}
